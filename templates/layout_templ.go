// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Layout() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Chattr</title><script src=\"https://unpkg.com/htmx.org@1.9.10\"></script><script src=\"https://unpkg.com/htmx.org/dist/ext/ws.js\"></script><script async crossorigin=\"anonymous\" data-clerk-publishable-key=\"pk_test_dW5pcXVlLWJpc29uLTk4LmNsZXJrLmFjY291bnRzLmRldiQ\" src=\"https://unique-bison-98.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js\" type=\"text/javascript\"></script><script>\n            window.addEventListener('load', async function () {\n                try {\n                    await window.Clerk.load();\n                    const authDiv = document.getElementById('auth');\n                    \n                    if (window.Clerk.user) {\n                        console.log('User is signed in');\n                        authDiv.innerHTML = '<div id=\"user-button\"></div>';\n                        const userButtonEl = document.getElementById('user-button');\n                        window.Clerk.mountUserButton(userButtonEl);\n\n                        // Get the session token\n                        const token = await window.Clerk.session.getToken();\n                        console.log('Token received:', token);\n\n                        // Add a link to chat if we're on the home page\n                        if (window.location.pathname === '/') {\n                            const container = document.getElementById('container');\n                            const chatLink = document.createElement('a');\n                            chatLink.href = '/chat';\n                            chatLink.textContent = 'Go to Chat';\n                            chatLink.onclick = async function(e) {\n                                e.preventDefault();\n                                try {\n                                    const response = await fetch('/chat', {\n                                        method: 'GET',\n                                        headers: {\n                                            'Authorization': 'Bearer ' + token\n                                        }\n                                    });\n                                    console.log('Response status:', response.status);\n                                    if (response.ok) {\n                                        window.location.href = '/chat';\n                                    } else {\n                                        console.error('Failed to access chat:', response.status);\n                                    }\n                                } catch (error) {\n                                    console.error('Fetch error:', error);\n                                }\n                            };\n                            container.appendChild(chatLink);\n                        }\n                    } else {\n                        console.log('No user signed in');\n                        authDiv.innerHTML = '<div id=\"sign-in\"></div>';\n                        const signInEl = document.getElementById('sign-in');\n                        window.Clerk.mountSignIn(signInEl);\n                    }\n                } catch (error) {\n                    console.error('Error initializing Clerk:', error);\n                }\n            });\n        </script><style>\n            #auth {\n                padding: 1rem;\n            }\n            #sign-in {\n                min-height: 600px;\n            }\n        </style><link rel=\"stylesheet\" href=\"/static/styles.css\"></head><body><div id=\"auth\"></div><div id=\"container\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
